#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8443

int generate_random_number(int min, int max) {
    return rand() % (max - min + 1) + min;
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket is failed!");
        exit(EXIT_FAILURE);
    }

    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind is failed!");
        exit(EXIT_FAILURE);
    }

    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", PORT);

    int min_range, max_range;
    printf("Enter the minimum range (100 or greater): ");
    scanf("%d", &min_range);
    printf("Enter the maximum range (999 or smaller): ");
    scanf("%d", &max_range);

    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
            perror("Connection Accepted!");
            exit(EXIT_FAILURE);
        }

        int random_number = generate_random_number(min_range, max_range);
        printf("Generated random number: %d\n", random_number);

        char random_number_str[4];
        sprintf(random_number_str, "%d", random_number);

        send(new_socket, random_number_str, strlen(random_number_str), 0);

        printf("Sent random number to client.\n");

        close(new_socket);
    }

    return 0;
}
